{
    "Conditions": {
        "Deploy": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "WebAppRevision"
                        },
                        ""
                    ]
                }
            ]
        }
    },
    "Mappings": {
        "ECSRegionMap": {
            "ap-northeast-1": {
                "AMI": "ami-9cd57ffd"
            },
            "ap-southeast-1": {
                "AMI": "ami-a900a3ca"
            },
            "ap-southeast-2": {
                "AMI": "ami-5781be34"
            },
            "eu-central-1": {
                "AMI": "ami-54f5303b"
            },
            "eu-west-1": {
                "AMI": "ami-a1491ad2"
            },
            "us-east-1": {
                "AMI": "ami-eca289fb"
            },
            "us-east-2": {
                "AMI": "ami-446f3521"
            },
            "us-west-1": {
                "AMI": "ami-9fadf8ff"
            },
            "us-west-2": {
                "AMI": "ami-7abc111a"
            }
        }
    },
    "Outputs": {
        "AssetsBucketDomainName": {
            "Description": "Assets bucket domain name",
            "Value": {
                "Fn::GetAtt": [
                    "AssetsBucket",
                    "DomainName"
                ]
            }
        },
        "AssetsDistributionDomainName": {
            "Description": "The assest CDN domain name",
            "Value": {
                "Fn::GetAtt": [
                    "AssetsDistribution",
                    "DomainName"
                ]
            }
        },
        "DashboardQueueARN": {
            "Description": "ARN of the source queue",
            "Value": {
                "Fn::GetAtt": [
                    "DashboardQueue",
                    "Arn"
                ]
            }
        },
        "DashboardQueueURL": {
            "Description": "URL of the source queue",
            "Value": {
                "Ref": "DashboardQueue"
            }
        },
        "LoadBalancerDNSName": {
            "Description": "Loadbalancer DNS",
            "Value": {
                "Fn::GetAtt": [
                    "LoadBalancer",
                    "DNSName"
                ]
            }
        },
        "RepositoryURL": {
            "Description": "The docker repository URL",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        {
                            "Ref": "AWS::AccountId"
                        },
                        ".dkr.ecr.",
                        {
                            "Ref": "AWS::Region"
                        },
                        ".amazonaws.com/",
                        {
                            "Ref": "ApplicationRepository"
                        }
                    ]
                ]
            }
        }
    },
    "Parameters": {
        "ContainerInstanceType": {
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium"
            ],
            "Default": "t2.medium",
            "Description": "The container instance type",
            "Type": "String"
        },
        "DatabaseAllocatedStorage": {
            "ConstraintDescription": "must be between 5 and 1024Gb.",
            "Default": "5",
            "Description": "The size of the database (Gb)",
            "MaxValue": "1024",
            "MinValue": "5",
            "Type": "Number"
        },
        "DatabaseClass": {
            "AllowedValues": [
                "db.t2.small",
                "db.t2.medium"
            ],
            "ConstraintDescription": "must select a valid database instance type.",
            "Default": "db.t2.medium",
            "Description": "Database instance class",
            "Type": "String"
        },
        "DatabaseName": {
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters.",
            "Default": "dashboard",
            "Description": "The database name",
            "MaxLength": "64",
            "MinLength": "1",
            "Type": "String"
        },
        "DatabasePassword": {
            "AllowedPattern": "[a-zA-Z0-9]*",
            "ConstraintDescription": "must contain only alphanumeric characters.",
            "Description": "The database admin account password",
            "MaxLength": "41",
            "MinLength": "10",
            "NoEcho": true,
            "Type": "String"
        },
        "DatabaseUser": {
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters.",
            "Default": "dashboard",
            "Description": "The database admin account username",
            "MaxLength": "16",
            "MinLength": "1",
            "Type": "String"
        },
        "DesiredScale": {
            "Default": "2",
            "Description": "Desired container instances count",
            "Type": "Number"
        },
        "DomainName": {
            "Description": "The domain name",
            "Type": "String"
        },
        "MaxScale": {
            "Default": "3",
            "Description": "Maximum container instances count",
            "Type": "Number"
        },
        "SecretKey": {
            "Description": "Application secret key",
            "Type": "String"
        },
        "WebAppRevision": {
            "Default": "",
            "Description": "An optional docker app revision to deploy",
            "Type": "String"
        },
        "WebWorkerCPU": {
            "Default": "1024",
            "Description": "Web worker CPU units",
            "Type": "Number"
        },
        "WebWorkerDesiredCount": {
            "Default": "2",
            "Description": "Web worker task instance count",
            "Type": "Number"
        },
        "WebWorkerMemory": {
            "Default": "2048",
            "Description": "Web worker memory",
            "Type": "Number"
        },
        "WebWorkerPort": {
            "Default": "8000",
            "Description": "Web worker container exposed port",
            "Type": "Number"
        }
    },
    "Resources": {
        "AppService": {
            "Condition": "Deploy",
            "DependsOn": [
                "AutoScalingGroup"
            ],
            "Properties": {
                "Cluster": {
                    "Ref": "Cluster"
                },
                "DesiredCount": {
                    "Ref": "WebWorkerDesiredCount"
                },
                "LoadBalancers": [
                    {
                        "ContainerName": "WebWorker",
                        "ContainerPort": {
                            "Ref": "WebWorkerPort"
                        },
                        "LoadBalancerName": {
                            "Ref": "LoadBalancer"
                        }
                    }
                ],
                "Role": {
                    "Ref": "AppServiceRole"
                },
                "TaskDefinition": {
                    "Ref": "WebTask"
                }
            },
            "Type": "AWS::ECS::Service"
        },
        "AppServiceRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ecs.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "elasticloadbalancing:Describe*",
                                        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                        "ec2:Describe*",
                                        "ec2:AuthorizeSecurityGroupIngress"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "WebServicePolicy"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "ApplicationRepository": {
            "Properties": {
                "RepositoryName": {
                    "Ref": "AWS::StackName"
                },
                "RepositoryPolicyText": {
                    "Statement": [
                        {
                            "Action": [
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:BatchGetImage",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:PutImage",
                                "ecr:InitiateLayerUpload",
                                "ecr:UploadLayerPart",
                                "ecr:CompleteLayerUpload"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": [
                                    {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:iam::",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":root"
                                            ]
                                        ]
                                    }
                                ]
                            },
                            "Sid": "AllowPushPull"
                        }
                    ],
                    "Version": "2008-10-17"
                }
            },
            "Type": "AWS::ECR::Repository"
        },
        "AssetsBucket": {
            "DeletionPolicy": "Retain",
            "Properties": {
                "AccessControl": "PublicRead",
                "CorsConfiguration": {
                    "CorsRules": [
                        {
                            "AllowedHeaders": [
                                "*"
                            ],
                            "AllowedMethods": [
                                "POST",
                                "PUT",
                                "HEAD",
                                "GET"
                            ],
                            "AllowedOrigins": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "https://*.",
                                            {
                                                "Ref": "DomainName"
                                            }
                                        ]
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "VersioningConfiguration": {
                    "Status": "Enabled"
                }
            },
            "Type": "AWS::S3::Bucket"
        },
        "AssetsDistribution": {
            "Properties": {
                "DistributionConfig": {
                    "DefaultCacheBehavior": {
                        "ForwardedValues": {
                            "QueryString": "false"
                        },
                        "TargetOriginId": "Assets",
                        "ViewerProtocolPolicy": "allow-all"
                    },
                    "Enabled": "true",
                    "Origins": [
                        {
                            "DomainName": {
                                "Fn::GetAtt": [
                                    "AssetsBucket",
                                    "DomainName"
                                ]
                            },
                            "Id": "Assets",
                            "S3OriginConfig": {
                                "OriginAccessIdentity": ""
                            }
                        }
                    ]
                }
            },
            "Type": "AWS::CloudFront::Distribution"
        },
        "AutoScalingGroup": {
            "Properties": {
                "DesiredCapacity": {
                    "Ref": "DesiredScale"
                },
                "HealthCheckGracePeriod": 300,
                "HealthCheckType": "EC2",
                "LaunchConfigurationName": {
                    "Ref": "ContainerLaunchConfiguration"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "LoadBalancer"
                    }
                ],
                "MaxSize": {
                    "Ref": "MaxScale"
                },
                "MinSize": {
                    "Ref": "DesiredScale"
                },
                "VPCZoneIdentifier": [
                    {
                        "Ref": "ContainerASubnet"
                    },
                    {
                        "Ref": "ContainerBSubnet"
                    }
                ]
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup"
        },
        "Certificate": {
            "Properties": {
                "DomainName": {
                    "Ref": "DomainName"
                },
                "DomainValidationOptions": [
                    {
                        "DomainName": {
                            "Ref": "DomainName"
                        },
                        "ValidationDomain": {
                            "Ref": "DomainName"
                        }
                    }
                ]
            },
            "Type": "AWS::CertificateManager::Certificate"
        },
        "Cluster": {
            "Type": "AWS::ECS::Cluster"
        },
        "ContainerARouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                },
                "SubnetId": {
                    "Ref": "ContainerASubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "ContainerASubnet": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::Region"
                            },
                            "a"
                        ]
                    ]
                },
                "CidrBlock": "10.0.10.0/24",
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "ContainerBRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                },
                "SubnetId": {
                    "Ref": "ContainerBSubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "ContainerBSubnet": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::Region"
                            },
                            "b"
                        ]
                    ]
                },
                "CidrBlock": "10.0.11.0/24",
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "ContainerInstanceProfile": {
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "ContainerInstanceRole"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "ContainerInstanceRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:ListBucket"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:s3:::",
                                                {
                                                    "Ref": "AssetsBucket"
                                                }
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Action": [
                                        "s3:*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:s3:::",
                                                {
                                                    "Ref": "AssetsBucket"
                                                },
                                                "/*"
                                            ]
                                        ]
                                    }
                                }
                            ]
                        },
                        "PolicyName": "AssetsManagementPolicy"
                    },
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "ecs:*",
                                        "elasticloadbalancing:*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "ECSManagementPolicy"
                    },
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "ecr:GetAuthorizationToken",
                                        "ecr:GetDownloadUrlForLayer",
                                        "ecr:BatchGetImage",
                                        "ecr:BatchCheckLayerAvailability"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": "ECRManagementPolicy"
                    },
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:Create*",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "arn:aws:logs:*:*:*"
                                }
                            ]
                        },
                        "PolicyName": "LoggingPolicy"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "ContainerLaunchConfiguration": {
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "commands": {
                            "register_cluster": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "echo ECS_CLUSTER=",
                                            {
                                                "Ref": "Cluster"
                                            },
                                            " >> /etc/ecs/ecs.config\n",
                                            "echo 'ECS_AVAILABLE_LOGGING_DRIVERS=",
                                            "[\"json-file\",\"awslogs\"]'",
                                            " >> /etc/ecs/ecs.config\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[main]\n",
                                            "stack=",
                                            {
                                                "Ref": "AWS::StackId"
                                            },
                                            "\n",
                                            "region=",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000400",
                                "owner": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[cfn-auto-reloader-hook]\n",
                                            "triggers=post.update\n",
                                            "path=Resources.ContainerLaunchConfiguration.",
                                            "Metadata.AWS::CloudFormation::Init\n",
                                            "action=/opt/aws/bin/cfn-init -v ",
                                            "         --stack ",
                                            {
                                                "Ref": "AWS::StackName"
                                            },
                                            "         --resource ContainerLaunchConfiguration",
                                            "         --region ",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            "\n",
                                            "runas=root\n"
                                        ]
                                    ]
                                }
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "cfn-hup": {
                                    "enabled": "true",
                                    "ensureRunning": "true",
                                    "files": [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "IamInstanceProfile": {
                    "Ref": "ContainerInstanceProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "ECSRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "InstanceType": {
                    "Ref": "ContainerInstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "ContainerSecurityGroup"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "yum install -y aws-cfn-bootstrap\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource ContainerLaunchConfiguration ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --stack",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource ContainerLaunchConfiguration ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration"
        },
        "ContainerSecurityGroup": {
            "Properties": {
                "GroupDescription": "Container security group.",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "10.0.2.0/24",
                        "FromPort": {
                            "Ref": "WebWorkerPort"
                        },
                        "IpProtocol": "tcp",
                        "ToPort": {
                            "Ref": "WebWorkerPort"
                        }
                    },
                    {
                        "CidrIp": "10.0.3.0/24",
                        "FromPort": {
                            "Ref": "WebWorkerPort"
                        },
                        "IpProtocol": "tcp",
                        "ToPort": {
                            "Ref": "WebWorkerPort"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "DashboardQueue": {
            "Type": "AWS::SQS::Queue"
        },
        "DatabaseSecurityGroup": {
            "Properties": {
                "GroupDescription": "Database security group.",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "10.0.10.0/24",
                        "FromPort": "5432",
                        "IpProtocol": "tcp",
                        "ToPort": "5432"
                    },
                    {
                        "CidrIp": "10.0.11.0/24",
                        "FromPort": "5432",
                        "IpProtocol": "tcp",
                        "ToPort": "5432"
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "DatabaseSubnetGroup": {
            "Properties": {
                "DBSubnetGroupDescription": "Subnets available for the RDS DB Instance",
                "SubnetIds": [
                    {
                        "Ref": "ContainerASubnet"
                    },
                    {
                        "Ref": "ContainerBSubnet"
                    }
                ]
            },
            "Type": "AWS::RDS::DBSubnetGroup"
        },
        "GatewayAttachement": {
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::VPCGatewayAttachment"
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "LoadBalancer": {
            "Properties": {
                "CrossZone": "true",
                "HealthCheck": {
                    "HealthyThreshold": "2",
                    "Interval": "100",
                    "Target": {
                        "Fn::Join": [
                            "",
                            [
                                "HTTP:",
                                {
                                    "Ref": "WebWorkerPort"
                                },
                                "/health-check"
                            ]
                        ]
                    },
                    "Timeout": "10",
                    "UnhealthyThreshold": "2"
                },
                "Listeners": [
                    {
                        "InstancePort": {
                            "Ref": "WebWorkerPort"
                        },
                        "InstanceProtocol": "HTTP",
                        "LoadBalancerPort": 443,
                        "Protocol": "HTTPS",
                        "SSLCertificateId": {
                            "Ref": "Certificate"
                        }
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "LoadBalancerSecurityGroup"
                    }
                ],
                "Subnets": [
                    {
                        "Ref": "LoadbalancerASubnet"
                    },
                    {
                        "Ref": "LoadbalancerBSubnet"
                    }
                ]
            },
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
        },
        "LoadBalancerSecurityGroup": {
            "Properties": {
                "GroupDescription": "Web load balancer security group.",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "443",
                        "IpProtocol": "tcp",
                        "ToPort": "443"
                    }
                ],
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "LoadbalancerASubnet": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::Region"
                            },
                            "a"
                        ]
                    ]
                },
                "CidrBlock": "10.0.2.0/24",
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "LoadbalancerASubnetRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "LoadbalancerASubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "LoadbalancerBSubnet": {
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::Region"
                            },
                            "b"
                        ]
                    ]
                },
                "CidrBlock": "10.0.3.0/24",
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "LoadbalancerBSubnetRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "LoadbalancerBSubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "NatGateway": {
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NatIp",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet"
                }
            },
            "Type": "AWS::EC2::NatGateway"
        },
        "NatIp": {
            "Properties": {
                "Domain": "vpc"
            },
            "Type": "AWS::EC2::EIP"
        },
        "PostgreSQL": {
            "DeletionPolicy": "Snapshot",
            "Properties": {
                "AllocatedStorage": {
                    "Ref": "DatabaseAllocatedStorage"
                },
                "BackupRetentionPeriod": "7",
                "DBInstanceClass": {
                    "Ref": "DatabaseClass"
                },
                "DBInstanceIdentifier": {
                    "Ref": "AWS::StackName"
                },
                "DBName": {
                    "Ref": "DatabaseName"
                },
                "DBSubnetGroupName": {
                    "Ref": "DatabaseSubnetGroup"
                },
                "Engine": "postgres",
                "EngineVersion": "9.4.5",
                "MasterUserPassword": {
                    "Ref": "DatabasePassword"
                },
                "MasterUsername": {
                    "Ref": "DatabaseUser"
                },
                "MultiAZ": "true",
                "StorageType": "gp2",
                "VPCSecurityGroups": [
                    {
                        "Ref": "DatabaseSecurityGroup"
                    }
                ]
            },
            "Type": "AWS::RDS::DBInstance"
        },
        "PrivateNatRoute": {
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NatGateway"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "PrivateRouteTable": {
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "PublicRoute": {
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "PublicRouteTable": {
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "PublicSubnet": {
            "Properties": {
                "CidrBlock": "10.0.1.0/24",
                "VpcId": {
                    "Ref": "Vpc"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "PublicSubnetRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "Vpc": {
            "Properties": {
                "CidrBlock": "10.0.0.0/16"
            },
            "Type": "AWS::EC2::VPC"
        },
        "WebLogs": {
            "DeletionPolicy": "Retain",
            "Properties": {
                "RetentionInDays": 365
            },
            "Type": "AWS::Logs::LogGroup"
        },
        "WebTask": {
            "Condition": "Deploy",
            "Properties": {
                "ContainerDefinitions": [
                    {
                        "Cpu": {
                            "Ref": "WebWorkerCPU"
                        },
                        "Environment": [
                            {
                                "Name": "AWS_STORAGE_BUCKET_NAME",
                                "Value": {
                                    "Ref": "AssetsBucket"
                                }
                            },
                            {
                                "Name": "CDN_DOMAIN_NAME",
                                "Value": {
                                    "Fn::GetAtt": [
                                        "AssetsDistribution",
                                        "DomainName"
                                    ]
                                }
                            },
                            {
                                "Name": "DOMAIN_NAME",
                                "Value": {
                                    "Ref": "DomainName"
                                }
                            },
                            {
                                "Name": "PORT",
                                "Value": {
                                    "Ref": "WebWorkerPort"
                                }
                            },
                            {
                                "Name": "SECRET_KEY",
                                "Value": {
                                    "Ref": "SecretKey"
                                }
                            },
                            {
                                "Name": "DATABASE_URL",
                                "Value": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "postgres://",
                                            {
                                                "Ref": "DatabaseUser"
                                            },
                                            ":",
                                            {
                                                "Ref": "DatabasePassword"
                                            },
                                            "@",
                                            {
                                                "Fn::GetAtt": [
                                                    "PostgreSQL",
                                                    "Endpoint.Address"
                                                ]
                                            },
                                            "/",
                                            {
                                                "Ref": "DatabaseName"
                                            }
                                        ]
                                    ]
                                }
                            },
                            {
                                "Name": "DB_HOST",
                                "Value": {
                                    "Fn::GetAtt": [
                                        "PostgreSQL",
                                        "Endpoint.Address"
                                    ]
                                }
                            },
                            {
                                "Name": "DB_NAME",
                                "Value": {
                                    "Ref": "DatabaseName"
                                }
                            },
                            {
                                "Name": "DB_USERNAME",
                                "Value": {
                                    "Ref": "DatabaseUser"
                                }
                            },
                            {
                                "Name": "DB_PASSWORD",
                                "Value": {
                                    "Ref": "DatabasePassword"
                                }
                            }
                        ],
                        "Essential": "true",
                        "Image": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::AccountId"
                                    },
                                    ".dkr.ecr.",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    ".amazonaws.com/",
                                    {
                                        "Ref": "ApplicationRepository"
                                    },
                                    ":",
                                    {
                                        "Ref": "WebAppRevision"
                                    }
                                ]
                            ]
                        },
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": {
                                    "Ref": "WebLogs"
                                },
                                "awslogs-region": {
                                    "Ref": "AWS::Region"
                                }
                            }
                        },
                        "Memory": {
                            "Ref": "WebWorkerMemory"
                        },
                        "Name": "WebWorker",
                        "PortMappings": [
                            {
                                "ContainerPort": {
                                    "Ref": "WebWorkerPort"
                                },
                                "HostPort": {
                                    "Ref": "WebWorkerPort"
                                }
                            }
                        ]
                    }
                ]
            },
            "Type": "AWS::ECS::TaskDefinition"
        }
    }
}
